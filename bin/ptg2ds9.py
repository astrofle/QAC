#! /usr/bin/env python
#
#
#  interconvert between ds9 and ptg files. The purpose is really to edit ds9 region files in ds9, e.g. visually remove some points,
#  save them back in ds9 format, convert back to ptg, so the simulator can read it again.
#
#  Example use:
#
#     ptg2ds9 -r 10.0      -i test.ptg > test.reg
#     ptg2ds9       --ds9  -i test.reg > test.ptg

from __future__ import print_function

import os, sys


# import aplpy
# import matplotlib.pyplot as plt
# import numpy as np
# from astropy.io import fits
# import pyfits as fits
import argparse

parser = argparse.ArgumentParser()

parser.add_argument(                     
    '-input',dest='input',default='default.ptg',
    help='Name of input ptg (or ds9 reg) file')

parser.add_argument(                            
    '-radius',dest='radius',default=1.0,type=float,
    help='Radius of ds9 region circle in arcsec')

parser.add_argument(                                      # 
    '--ds9',dest='bool_ds9',action='store_true',
    help='Input is ds9 region file, not ptg')

parser.add_argument(                                      # 
    '--ell',dest='bool_ell',action='store_true',
    help='Output ellipses (for casaviewer) instead of circle')

parser.add_argument(                                      # 
    '--dot',dest='bool_dot',action='store_true',
    help='Parse the DMS as ...')

parser.add_argument(                                      # 
    '--deg',dest='bool_deg',action='store_true',
    help='Input file has "deg"')

results  = parser.parse_args()
itable   = results.input
radius   = results.radius
bool_ds9 = results.bool_ds9
bool_ell = results.bool_ell
bool_dot = results.bool_dot
bool_deg = results.bool_deg

# Standard header to be use by us
m1 = '# Region file format: DS9 version 4.1'
m2 = '# generated by ptg2ds9'
m3 = 'global color=green dashlist=8 3 width=1 font="helvetica 10 normal roman" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1'
m4 = 'fk5'
m5 = 'circle(11:59:58.707,-30:00:52.000,4.692")'

def read_ptg(pfile, dot=False):
    """  Read ptg file, just grab the RA/DEC
         why are there two formats???
    J2000 11h59m52.758s -29d58m50.149s [time]
    J2000 12:00:07.39153 -030.00.00.000000  30.0
    """
    fp = open(pfile)
    lines = fp.readlines()
    fp.close()
    #
    out = []
    for line in lines:
        if line[0] == '#': continue
        w = line.split()
        out.append((w[1],w[2]))
    return out
            
def read_ds9(pfile):
    """  Read ds9 region file, just grab the RA/DEC
    circle(12:00:5.173,-29:58:50.149,10")
    ellipse(12:00:00.554,-29:59:46.400,9.600",8.800",359.99987)
    """
    fp = open(pfile)
    lines = fp.readlines()
    fp.close()
    #
    out = []
    for line in lines:
        w = line.split('(')
        if w[0] != 'circle': continue
        w  = w[1].split(',')  
        out.append((w[0],w[1]))
    return out
            

def ptg_ds9(lines, dot=False, deg=False):
    out = []
    
    if deg:
        for line in lines:
            r = line[0][:line[0].find('deg')]
            d = line[1][:line[1].find('deg')]
            out.append((r,d))
        return out
    
    for line in lines:
        r = line[0]
        d = line[1]
        if dot:
            d = d.replace('.',':',1).replace('.',':',1).strip()
        else:
            r = r.replace('h',':').replace('m',':').replace('s',' ').strip()
            d = d.replace('d',':').replace('m',':').replace('s',' ').strip()
        out.append((r,d))
    return out

def ds9_ptg(lines):
    out = []
    for line in lines:
        r = line[0]
        d = line[1]
        r = r.replace(':','h',1).replace(':','m',1).strip() + 's'
        d = d.replace(':','d',1).replace(':','m',1).strip() + 's'
        out.append((r,d))
    return out

def show_ds9(lines, radius=1.0, ellipse=False):
    """
    circle(12:00:5.173,-29:58:50.149,10")     HMS
    circle(12.00000,-30.00000,10")            DEG
    ellipse(12:00:00.554,-29:59:46.400,9.600",8.800",359.99987)
    """
    print(m1)
    print(m2)
    print(m3)
    print(m4)
    for line in lines:
        r = line[0]
        d = line[1]
        if ellipse:
            print('ellipse(%s,%s,%g",%g",0.0)' % (r,d,radius,radius))
        else:
            print('circle(%s,%s,%g")' % (r,d,radius))

def show_ptg(lines):
    for line in lines:
        r = line[0]
        d = line[1]
        print('J2000 %s %s' % (r,d))

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print("Usage %s ..." % (sys.argv[0]))

    if bool_ds9:
        lines = read_ds9(itable)
        lines = ds9_ptg(lines)
        show_ptg(lines)
    else:
        lines = read_ptg(itable)
        lines = ptg_ds9(lines,bool_dot,bool_deg)
        show_ds9(lines,radius,bool_ell)
